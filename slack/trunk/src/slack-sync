#!/usr/bin/perl -w
# $Id$
# vim:sw=2
# vim600:fdm=marker

# This script is in charge of copying files from the (possibly remote)
# master directory to a local cache, using rsync

require 5.006;
use warnings FATAL => qw(all);
use strict;
use sigtrap qw(die untrapped normal-signals
               stack-trace any error-signals);

use File::Path;
use File::Find;

use constant DEFAULT_CONFIG_FILE => '/etc/slack.conf';

my @rsync = ('rsync',
              '--cvs-exclude',
              '--recursive',
              '--copy-links',
              '--times',
              '--perms',
              '--sparse',
              '--files-from=-',
              '--from0',
              );

(my $PROG = $0) =~ s#.*/##;

sub check_cache ();
sub sync_role (@);
sub apply_default_perms_to_role ($);

########################################
# Environment
# Helpful prefix to die messages
$SIG{__DIE__} = sub { die "FATAL[$PROG]: @_"; };
# Set a reasonable umask
umask 077;
# Get out of wherever (possibly NFS-mounted) we were
chdir("/")
  or die "Could not chdir /: $!";
# Autoflush on STDERR
select((select(STDERR), $|=1)[0]);

########################################
# Config and option parsing {{{
my $usage = <<EOF;
Usage: $PROG [options] <role> [<role>...]

Options:
  -h, -?, --help
      Print this help message and exit.

  -v, --verbose
      Be verbose

  -C, --config  FILE
      Use this config file instead of /etc/slack.conf

  -s, --source  DIR
      Source for slack files

  -c, --cache  DIR
      Local cache directory for slack files

  -r, --root  DIR
      Root destination for slack files

  -n, --dry-run
      Don't write any files to disk -- just report what would have been done.

  -b, --backup
      Make backups of existing files in ROOT that are overwritten

  --backup-dir  DIR
      Put backups into this directory.
EOF

# Option defaults
my %opt = (
  config => DEFAULT_CONFIG_FILE,
  verbose => 0,
);
# A special option to shut off verbose
$opt{quiet} = sub { $opt{verbose} = 0; };

# Reads through the config file
sub read_config () {
  my $config = $opt{config};
  open(CONFIG, "<", $config)
    or die "Could not open config file '$config': $!";
  while(<CONFIG>) {
    chomp;
    s/#.*//; # delete comments
    s/\s+$//; # delete trailing spaces
    next if m/^$/; # skip empty lines
    if (m/^[A-Z_]+=\S+/) {
      my ($key, $value) = split(/=/, $_, 2);
      $key =~ tr/A-Z_/a-z-/;
      if (not defined $opt{$key}) {
        ($opt{verbose} > 1) and print STDERR "$PROG: Setting '$key' to '$value'\n";
        $opt{$key} = $value;
      }
    } else {
      warn "WARNING[$PROG]: Garbage line '$_' in '$config' line $.\n";
    }
  }
  close(CONFIG)
    or die "Could not close config file: $!";
}

# Collect options
{
    use Getopt::Long;
    Getopt::Long::Configure ("bundling");
    GetOptions(\%opt,
      'verbose|v+',
      'quiet',
      'help|h|?',
      'backup|b',
      'backup-dir=s',
      'config|C=s',
      'dry-run|n',
      'source|s=s',
      'cache|c=s',
      'root|r=s',
      ) or die $usage;
    if ($opt{help}) {
        print $usage;
        exit 0;
    }
    read_config;
}

# Arguments are required
die "No roles given!\n\n$usage" unless @ARGV;
die "No source defined!\n\n$usage" unless $opt{source};
die "No cache defined!\n\n$usage" unless $opt{cache};

# Prepare for backups
if ($opt{backup} and $opt{'backup-dir'}) {
  # Make sure backup directory exists
  unless (-d $opt{'backup-dir'}) {
    ($opt{verbose} > 0) and print STDERR "Creating backup directory '$opt{'backup-dir'}'\n";
    if (not $opt{'dry-run'}) {
      eval { mkpath($opt{'backup-dir'}); };
      die "Could not mkpath backup dir '$opt{'backup-dir'}': $@\n" if $@;
    }
  }
  push(@rsync, "--backup", "--backup-dir=$opt{'backup-dir'}");
}
# Look at source type, and add options if necessary
if ($opt{source} =~ m/^[a-zA-Z_@\.-]+::/) {
  # This is tunnelled rsync, and so needs an extra option
  push @rsync, '-e', 'ssh';
}

# Pass options along to rsync
if ($opt{'dry-run'}) {
  push @rsync, '--dry-run';
}
# Pass options along to rsync
if ($opt{'verbose'} > 1) {
  push @rsync, '--verbose';
}
# }}}

# copy over the new files
for my $full_role (@ARGV) {
  # Split the full role (e.g. google.foogle.woogle) into components
  my @role_parts = split(/\./, $full_role);
  # Reassemble parts one at a time onto @role and sync as we go,
  # so we do "google", then "google.foogle", then "google.foogle.woogle"
  my @role = ();
  # Make sure we've got the right perms before we copy stuff down
  check_cache();
  while (defined (my $part = shift @role_parts)) {
    push @role, $part;
    ($opt{verbose} > 0) and print STDERR "$PROG: Calling sync_role for @role\n";
    sync_role(@role);
  }
  apply_default_perms_to_role($role[0]);
}
exit 0;

# Make sure the cache directory exists and is mode 0700, to protect files
# underneath in transit
sub check_cache () {
  my $cache = $opt{cache} . "/roles";
  if (not $opt{'dry-run'}) {
    if (not -d $cache) {
      ($opt{verbose} > 0) and print STDERR "$PROG: Creating '$cache'\n";
        eval { mkpath($cache); };
        die "Could not mkpath cache dir '$cache': $@\n" if $@;
    }
    ($opt{verbose} > 0) and print STDERR "$PROG: Checking perms on '$cache'\n";
    if ($> != 0) {
      warn "WARNING[$PROG]: Not superuser; unable to chown files\n";
    } else {
      chown(0, 0, $cache)
        or die "Could not chown 0:0 '$cache': $!\n";
    }
    chmod(0700, $cache)
      or die "Could not chmod 0700 '$cache': $!\n";
  }
}

# Copy the files for a role from SOURCE to CACHE
sub sync_role (@) {
  my @role = @_;
  my @subdirs;
  my @this_rsync = @rsync;
  my ($source, $destination);
  # For the base role, do both files and scripts, and delete any files
  # that don't exist in the repository.  For all subroles, just do the
  # files, and don't delete (otherwise we'll delete all files not in
  # the subrole, which may be most of them!)
  if (scalar @role == 1) {
    @subdirs = qw(files scripts);
    push @this_rsync, "--delete";
    # $role[$[] is the base role name
    $source = $opt{source} . "/roles/" . $role[$[] . "/";
    $destination = $opt{cache} . "/roles/" . $role[$[] . "/";
  } else {
    # for subroles, we're stuffing the stuff in files.foo.bar/ into files/
    push @this_rsync, "--no-relative";
    # It'd be nice if we could just do all subroles here, one after
    # another, but apparently rsync ignores the second appearance of a
    # file, so files in subsubroles would no longer override files by
    # the same name in subroles if we did that.
    @subdirs = (join(".", "files", @role[($[+1)..$#role])."/");
    $source = $opt{source} . "/roles/" . $role[$[] . "/";
    $destination = $opt{cache} . "/roles/" . $role[$[] . "/files/";
  }

  my @command = (@this_rsync, $source, $destination);
  ($opt{verbose} > 0) and print STDERR "$PROG: Syncing ".join(", ",@subdirs)." from $source with '@command'\n";
  my ($rsync_pid, $rsync_fh);

  if (not -d $destination) {
    if (not $opt{'dry-run'}) {
      ($opt{verbose} > 0) and print STDERR "$PROG: Creating '$destination'\n";
      eval { mkpath($destination); };
      die "Could not mkpath cache dir '$destination': $@\n" if $@;
    } else {
      warn "WARNING[$PROG]: '$destination' does not exist and we can't create it when doing dry run.  rsync will fail.\n";
    }
  }

  # Divide into parent (which will make a list of files to install)
  # and child (which will exec rsync)
  if ($rsync_pid = open($rsync_fh, "|-")) {
    # Parent
  } elsif (defined $rsync_pid) {
    # Child
    # This redirection is necessary because rsync sends
    #   verbose output to STDOUT
    open(STDOUT, ">&STDERR")
      or die "Could not redirect STDOUT to STDERR\n";
    exec(@command);
    die "Could not exec '@command': $!\n";
  } else {
    die "Could not fork: $!\n";
  }

  # send the list of directories to rsync (delimited by nulls
  # since we gave --from0 in options)
  print $rsync_fh join("\0", (@subdirs, ""));

  # Check return value
  unless (close($rsync_fh)) {
    if ($!) {
        die "Syserr on system '@command': $!\n";
    }
    if ($? & 128) {
        die "'@command' dumped core\n";
    }
    if (my $sig = $? & 127) {
        die "'@command' caught sig $sig\n";
    }
    if (my $exit = $? >> 8) {
        die "'@command' returned $exit\n";
    }
    die "Unknown error on '@command'\n";
  }
}

# This just takes the base role, and chmods everything under it
sub apply_default_perms_to_role ($) {
  my ($role) = @_;
  my $destination = $opt{cache} . "/roles/" . $role;
  ($opt{verbose} > 0) and print STDERR "$PROG: Setting default perms on $destination\n";
  if ($> != 0) {
    warn "WARNING[$PROG]: Not superuser; won't be able to chown files\n";
  }
  # Use File::Find to recurse the directory
  find({
      # The "wanted" subroutine is called for every directory entry
      wanted => sub {
        return if $opt{'dry-run'};
        if (-l) {
          # symlinks shouldn't be in here,
          #     since we dereference when copying
          warn "WARNING[$PROG]: Skipping symlink at $File::Find::name: $!\n";
          return;
        } elsif (-f _) { # results of last stat saved in the "_"
          if (-x _) {
            chmod 0555, $_
              or die "Could not chmod 0555 $File::Find::name: $!";
          } else {
            chmod 0444, $_
              or die "Could not chmod 0444 $File::Find::name: $!";
          }
        } elsif (-d _) {
          chmod 0755, $_
            or die "Could not chmod 0755 $File::Find::name: $!";
        } else {
          warn "WARNING[$PROG]: Unknown file type at $File::Find::name: $!\n";
        }
        return if $> != 0; # skip chowning if not superuser
        chown 0, 0, $_
          or die "Could not chown 0:0 $File::Find::name: $!";
      },
      # end of wanted function
    },
    # way down here, we have the directory to traverse with File::Find
    $destination,
  );
}
