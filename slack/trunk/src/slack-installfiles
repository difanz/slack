#!/usr/bin/perl -w
# vim:sw=2
# vim600:fdm=marker
# This script is in charge of copying files from the local stage to the root
# of the local filesystem

require 5.006;
use warnings FATAL => qw(all);
use strict;
use sigtrap qw(die untrapped normal-signals
               stack-trace any error-signals);

use File::Path;
use File::Find;

use constant DEFAULT_CONFIG_FILE => '/etc/slack.conf';

my @rsync = ('rsync',
             '--relative',
             '--times',
             '--perms',
             '--group',
             '--owner',
             '--links',
             '--devices',
             '--sparse',
             '--no-implied-dirs', # SO GOOD!
             '--files-from=-',
             '--from0',
             );

(my $PROG = $0) =~ s#.*/##;

sub install_files ($);

########################################
# Environment
# Helpful prefix to die messages
$SIG{__DIE__} = sub { die "FATAL[$PROG]: @_"; };
# Set a reasonable umask
umask 077;
# Get out of wherever (possibly NFS-mounted) we were
chdir("/")
  or die "Could not chdir /: $!";
# Autoflush on STDERR
select((select(STDERR), $|=1)[0]);

########################################
# Config and option parsing {{{
my $usage = <<EOF;
Usage: $PROG [options] <role> [<role>...]

Options:
  -h, -?, --help
      Print this help message and exit.

  -v, --verbose
      Be verbose

  -C, --config  FILE
      Use this config file instead of /etc/slack.conf

  -s, --source  DIR
      Source for slack files

  -c, --cache  DIR
      Local cache directory for slack files

  -t, --stage  DIR
      Local staging directory for slack files

  -r, --root  DIR
      Root destination for slack files

  -n, --dry-run
      Don't write any files to disk -- just report what would have been done.

  -b, --backup
      Make backups of existing files in ROOT that are overwritten

  --backup-dir  DIR
      Put backups into this directory.
EOF

# Option defaults
my %opt = (
  config => DEFAULT_CONFIG_FILE,
  verbose => 0,
);
# A special option to shut off verbose
$opt{quiet} = sub { $opt{verbose} = 0; };

# Reads through the config file
sub read_config () {
  my $config = $opt{config};
  open(CONFIG, "<", $config)
    or die "Could not open config file: $!";
  while(<CONFIG>) {
    chomp;
    s/#.*//; # delete comments
    s/\s+$//; # delete trailing spaces
    next if m/^$/; # skip empty lines
    if (m/^[A-Z_]+=\S+/) {
      my ($key, $value) = split(/=/, $_, 2);
      $key =~ tr/A-Z_/a-z-/;
      if (not defined $opt{$key}) {
        ($opt{verbose} > 1) and print STDERR "$PROG: Setting '$key' to '$value'\n";
        $opt{$key} = $value;
      }
    } else {
      warn "WARNING[$PROG]: Garbage line '$_' in '$config' line $.\n";
    }
  }
  close(CONFIG)
    or die "Could not close config file: $!";
}

# Collect options
{
    use Getopt::Long;
    Getopt::Long::Configure ("bundling");
    GetOptions(\%opt,
      'verbose|v+',
      'quiet',
      'help|h|?',
      'backup|b',
      'backup-dir=s',
      'config|C=s',
      'dry-run|n',
      'source|s=s',
      'cache|c=s',
      'stage|t=s',
      'root|r=s',
      ) or die $usage;
    if ($opt{help}) {
        print $usage;
        exit 0;
    }
    read_config;
}
# }}}

# Arguments are required
die "No roles given!\n\n$usage" unless @ARGV;
die "No root defined!\n\n$usage" unless $opt{root};
die "No stage defined!\n\n$usage" unless $opt{stage};

unless (-d $opt{root}) {
    if (not $opt{'dry-run'}) {
      eval { mkpath($opt{root}); };
      die "Could not mkpath destination directory '$opt{root}': $@\n" if $@;
    }
    warn "WARNING[$PROG]: Created destination directory '".$opt{root}."'\n";
}

# Prepare for backups
if ($opt{backup} and $opt{'backup-dir'}) {
  # Make sure backup directory exists
  unless (-d $opt{'backup-dir'}) {
    ($opt{verbose} > 0) and print STDERR "Creating backup directory '$opt{'backup-dir'}'\n";
    if (not $opt{'dry-run'}) {
      eval { mkpath($opt{'backup-dir'}); };
      die "Could not mkpath backup dir '$opt{'backup-dir'}': $@\n" if $@;
    }
  }
  push(@rsync, "--backup", "--backup-dir=$opt{'backup-dir'}");
}
# Pass options along to rsync
if ($opt{'dry-run'}) {
  push @rsync, '--dry-run';
}
if ($opt{'verbose'} > 1) {
  push @rsync, '--verbose';
}

# copy over the new files
for my $role (@ARGV) {
  install_files($role);
}
exit 0;

# This subroutine takes care of actually installing the files for a role
sub install_files ($) {
  my ($role) = @_;
  # final / is important for rsync
  my $source = $opt{stage} . "/roles/" . $role . "/files/";
  my $destination = $opt{root} . "/";
  my @command = (@rsync, $source, $destination);
  my ($rsync_pid, $rsync_fh);

  # Try to give some sensible message here
  if ($opt{verbose} > 0) {
    if ($opt{'dry-run'}) {
      print STDERR "$PROG: Dry-run syncing '$source' to '$destination'\n";
    } else {
      print STDERR "$PROG: Syncing '$source' to '$destination'\n";
    }
  }

  # Divide into parent (which will make a list of files to install)
  # and child (which will exec rsync)
  if ($rsync_pid = open($rsync_fh, "|-")) {
    # Parent
  } elsif (defined $rsync_pid) {
    # Child
    # This redirection is necessary because rsync sends
    #   verbose output to STDOUT
    open(STDOUT, ">&STDERR")
      or die "Could not redirect STDOUT to STDERR\n";
    exec(@command);
    die "Could not exec '@command': $!\n";
  } else {
    die "Could not fork: $!\n";
  }

  select((select($rsync_fh), $|=1)[0]);  # Turn on autoflush

  # Find files to rsync
  # Basically, we try to exclude directories, if at all possible,
  # so we're not constantly resetting permissions on /, /etc, and so on.
  find ({
      wanted => sub {
        if (-l or not -d _) {
          # Copy all files, links, etc
          my $file = $File::Find::name;
          # Strip the $source from the path,
          # since rsync expects relative paths
          ($file =~ s#^$source##)
            or die "sub failed: $source|$file";

          #print STDERR ":$file\n";
          print $rsync_fh "$file\0";
        } elsif (-d _) {
          # For directories, we only want to copy it if it doesn't
          # exist in the destination yet.
          my $dir = $File::Find::name;
          # We know the root directory will exist (we make it above),
          # so skip the base of the source
          (my $short_source = $source) =~ s#/$##;
          return if $dir eq $short_source;

          # Strip the $source from the path,
          # since rsync expects relative paths
          ($dir =~ s#^$source##)
            or die "sub failed: $source|$dir";

          if (not -d "$destination/$dir") {
            #print STDERR ":$dir\n";
            print $rsync_fh "$dir\0";
          }
        }
      }
    },
    $source,
  );

  # Check return value
  unless (close($rsync_fh)) {
    if ($!) {
        die "Syserr on system '@command': $!\n";
    }
    if ($? & 128) {
        die "'@command' dumped core\n";
    }
    if (my $sig = $? & 127) {
        die "'@command' caught sig $sig\n";
    }
    if (my $exit = $? >> 8) {
        die "'@command' returned $exit\n";
    }
    die "Unknown error on '@command'\n";
  }
}

