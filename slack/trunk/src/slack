#!/usr/bin/perl -w
# $Id$
# vim:sw=2
# vim600:fdm=marker

# This script is in charge of copying files from the (possibly remote)
# master directory to a local cache, using rsync

require 5.006;
use warnings FATAL => qw(all);
use strict;
use sigtrap qw(die untrapped normal-signals
               stack-trace any error-signals);

use File::Path;
use File::Find;
use POSIX; # for strftime

use constant LIBEXEC_DIR => '/usr/lib/slack';
use constant LIB_DIR => '/usr/lib/slack';
use lib LIB_DIR;
use Slack qw(run_command);

(my $PROG = $0) =~ s#.*/##;

# Arguments to pass to each backends (initialized to a hash of empty arrays)
my %backend_flags = ( map { $_ => [] }
  qw(getroles sync stage preinstall fixfiles installfiles postinstall)
);

my @roles;

########################################
# Environment
# Helpful prefix to die messages
$SIG{__DIE__} = sub { die "FATAL[$PROG]: @_"; };
# Set a reasonable umask
umask 077;
# Get out of wherever (possibly NFS-mounted) we were
chdir("/")
  or die "Could not chdir /: $!";
# Autoflush on STDERR
select((select(STDERR), $|=1)[0]);

########################################
# Config and option parsing {{{
my $usage = Slack::default_usage("$PROG [options] [<role>...]");
$usage .= <<EOF;

  --no-files
      Don't install any files in ROOT, but tell rsync to print what
      it would do.

  --no-scripts
      Don't run scripts.

  --role-list
      Role list for slack-getroles

EOF

# Options
my %opt = ();
# So we can distinguish stuff on the command line from config file stuff
my %command_line_opt = ();
Slack::get_options(
  opthash => \%opt,
  command_line_options => [
    'role-list=s',
    'no-scripts|noscripts',
    'no-files|nofiles',
  ],
  required_options => [ qw(source cache stage root) ],
  command_line_hash => \%command_line_opt,
  usage => $usage,
);

# Special options
if ($opt{'dry-run'}) {
  $opt{'no-scripts'} = 1;
  $opt{'no-files'} = 1;
}
if ($opt{'no-scripts'}) {
  for my $action (qw(fixfiles preinstall postinstall)) {
    push @{$backend_flags{$action}},
      '--dry-run';
  }
}
if ($opt{'no-files'}) {
  push @{$backend_flags{installfiles}},
    '--dry-run';
}
# propagate verbosity - 1 to all backends
if (defined $command_line_opt{'verbose'} and
    $command_line_opt{'verbose'} > 1) {
  for my $action (keys %backend_flags) {
    push @{$backend_flags{$action}},
      ('--verbose') x ($command_line_opt{'verbose'} - 1);
  }
}
# propagate these flags to all the backends
for my $option (qw(config root cache stage source)) {
  if ($command_line_opt{$option}) {
    for my $action (keys %backend_flags) {
      push @{$backend_flags{$action}},
        "--$option=$command_line_opt{$option}";
    }
  }
}
# getroles also can take 'role-list'
if ($command_line_opt{'role-list'}) {
  push @{$backend_flags{'getroles'}},
    "--role-list=$command_line_opt{'role-list'}";
}
    
# The backup option defaults to on if it wasn't specified
# on the command line or a config file
if (not defined $opt{backup}) {
  $opt{backup} = 1;
}
# Figure out a place to put backups
if ($opt{backup} and $opt{'backup-dir'}) {
  push @{$backend_flags{installfiles}},
    '--backup',
    '--backup-dir='.
      $opt{'backup-dir'}.
      "/".
      strftime('%F-%T', localtime(time))
    ;
}
# }}}

# Get a list of roles to install from slack-getroles {{{
if (not @ARGV) {
  my @command = (LIBEXEC_DIR.'/slack-getroles', @{$backend_flags{'getroles'}});
  $opt{verbose} and print STDERR "$PROG: getroles\n";
  ($opt{verbose} > 2) and print STDERR "$PROG: Calling '@command' to get a list of roles for this host.\n";
  my ($roles_pid, $roles_fh);
  if ($roles_pid = open($roles_fh, "-|")) {
    # Parent
  } elsif (defined $roles_pid) {
    # Child
    exec(@command);
    die "Could not exec '@command': $!\n";
  } else {
    die "Could not fork to run '@command': $!\n";
  }
  @roles = split(/\s+/, join(" ", <$roles_fh>));
  unless (close($roles_fh)) {
    Slack::check_system_exit(@command);
  }
} else {
  @roles = @ARGV;
}
# }}}

# Check role name syntax {{{
for my $role (@roles) {
  # Roles MUST begin with a letter.  All else is reserved.
  if ($role !~ m/^[a-zA-Z]/) {
    die "Role '$role' does not begin with a letter!";
  }
}
# }}}

$opt{verbose} and print STDERR "$PROG: installing roles: @roles\n";

# sync all the roles down at once
$opt{verbose} and print STDERR "$PROG: sync @roles\n";
run_command(LIBEXEC_DIR.'/slack-sync',
  @{$backend_flags{sync}}, @roles);

for my $role (@roles) {
  # stage
  $opt{verbose} and print STDERR "$PROG: stage $role\n";
  run_command(LIBEXEC_DIR.'/slack-stage',
    @{$backend_flags{stage}}, $role);

  # preinstall
  $opt{verbose} and print STDERR "$PROG: preinstall $role\n";
  run_command(LIBEXEC_DIR.'/slack-runscript',
    @{$backend_flags{preinstall}}, 'preinstall', $role);

  # fixfiles
  $opt{verbose} and print STDERR "$PROG: fixfiles $role\n";
  run_command(LIBEXEC_DIR.'/slack-runscript',
    @{$backend_flags{fixfiles}}, 'fixfiles', $role);
  # installfiles
  $opt{verbose} and print STDERR "$PROG: install $role\n";
  run_command(LIBEXEC_DIR.'/slack-installfiles',
    @{$backend_flags{installfiles}}, $role);

  # postinstall
  $opt{verbose} and print STDERR "$PROG: postinstall $role\n";
  run_command(LIBEXEC_DIR.'/slack-runscript',
    @{$backend_flags{postinstall}}, 'postinstall', $role);
}
exit 0;

